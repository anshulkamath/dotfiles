#!/bin/zsh

# directories
export DEVELOPER="$HOME/Developer"
export CONF="$HOME/.config"

# config
alias dev='cd $DEVELOPER'
alias dotfiles='cd $DEVELOPER/public/dotfiles'
alias zshrc='vim $CONF/zsh/.zshrc && source $_'
alias zshopts='vim $CONF/zsh/.zshopts && source $_'
alias aliases='vim $CONF/zsh/.zsh_aliases && source $_'
alias local-aliases='vim $CONF/zsh/.zsh_alises.local && source $_'
alias gitconfig='vim $CONF/git/config'
alias gitignore='vim $CONF/git/ignore'
alias vimplugs='vim $HOME/.vim/init/plugins.vim'
alias vimmaps='vim $HOME/.vim/init/keymaps.vim'
alias vimopts='vim $HOME/.vim/init/settings.vim'
alias vimsync="vim +'PlugInstall --sync' +qa"
alias vimfmt="vim -c 'set filetype=gitcommit'"

alias cp-dockertag="docker images | tail +2 | awk '{ print \$1\":\"\$2 }' | fzf | awk -F ':' '{print \$NF}' | tr -d '\n' | pbcopy"
alias pcapture="sudo tcpdump -i en0 -w pcap.pcap"
alias vsource="source venv/bin/activate"

# source work file if exists
test -f "$CONF/zsh/.zsh_aliases.local" && source $_

errcho() {
    echo $1 > /dev/stderr
    exit 1
}

safe-attach() {
  if [[ $# -ne 1 ]]; then
    echo "Usage: safe_attach [session_name]"
    return 1
  fi

  tmux has-session -t $1 2> /dev/null
  if [ $? -eq 1 ]; then
    # set environment variable for all successive tmux splits and current
    # split (different cases, since current split gets created automatically
    tmux new-session -ds $1 \; \
      setenv ENVIRONMENT $1 \; \
      send-keys -t 0 "export ENVIRONMENT="$1 C-m C-l \;
  fi

  attach $1
}

## Pretty simply, this applies a filter to stdin and matches
## a couple filters. The first filter (optional) is meant to
## further filter potential hits (filtering is a commutative
## action, and ergonomically it makes the most sense to have
## it defined at the beginning). The second filter must then
## provide a single regex capture group to extract the IP to
## SSH into.
ssh-grep () {
    if [[ $# -eq 0 ]]; then
        echo "Usage: $(basename $0) [TOP_FILTER] IP_PATTERN"
        echo
        echo "Ingests a stdin and extracts a hostname/IP pattern to SSH into."
        exit 1
    fi

    TMP_FILE=`mktemp`
    TOP_FILTER=$1
    IP_PATTERN=$2

    if [[ -z "$IP_PATTERN" ]]; then
        IP_PATTERN=$TOP_FILTER
    fi

    rg $TOP_FILTER | rg $IP_PATTERN > $TMP_FILE
    if [[ ! -s "$TMP_FILE" ]]; then
        errcho "unable to find any hosts that match the given filter(s)"
    fi

    if [[ `wc -l $TMP_FILE | awk '{print $1}'` -eq 1 ]]; then
        HOST=`cat $TMP_FILE | rg $IP_PATTERN | rg $IP_PATTERN -r '$1' -o`
    else
        HOST=$(cat $TMP_FILE | rg $IP_PATTERN | fzf | rg $IP_PATTERN -r '$1' -o)
    fi

    if [[ -z $HOST ]]; then
        errcho "unable to find host(s) that match the given ip pattern: '$IP_PATTERN'"
    fi

    ssh $HOST
}

ssh-inv() {
 ssh-grep $1 'ansible_host=([^\s]+)'
}

